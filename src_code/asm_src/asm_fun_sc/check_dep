section .data
    dep_enabled_msg db "DEP is enabled.", 0
    dep_disabled_msg db "DEP is disabled.", 0

section .text
    global _start

_start:
    ; Read the Control Register 0 (CR0)
    mov eax, cr0

    ; Test the DEP (bit 20) flag in CR0
    test eax, 0x100000   ; Bit 20 (0x100000) corresponds to DEP flag in CR0

    ; Jump to the appropriate label based on the result of the test
    jnz dep_enabled     ; Jump if DEP is enabled (non-zero result)
    jmp dep_disabled    ; Jump if DEP is disabled (zero result)

dep_enabled:
    ; Print "DEP is enabled" message
    mov eax, 4          ; System call number for sys_write
    mov ebx, 1          ; File descriptor (1 for stdout)
    mov ecx, dep_enabled_msg  ; Message address
    mov edx, dep_msg_len ; Message length
    int 0x80            ; Invoke the system call
    jmp end_program     ; Jump to the end of the program

dep_disabled:
    ; Print "DEP is disabled" message
    mov eax, 4          ; System call number for sys_write
    mov ebx, 1          ; File descriptor (1 for stdout)
    mov ecx, dep_disabled_msg ; Message address
    mov edx, dep_msg_len ; Message length
    int 0x80            ; Invoke the system call

end_program:
    ; Exit the program
    mov eax, 1          ; System call number for sys_exit
    xor ebx, ebx        ; Exit code 0
    int 0x80            ; Invoke the system call

section .bss
    dep_msg_len resb 1 ; Reserve space for message length variable
